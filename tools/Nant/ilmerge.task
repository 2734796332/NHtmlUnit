<?xml version="1.0" encoding="utf-8"?>
<task xmlns="http://nant.sf.net/schemas/nant.xsd">
  <script language="C#" prefix="custom" >
    <references>
      <include name="System.dll" />
      <include name="NAnt.Core.dll" />
    </references>
    <imports>
      <import namespace="System" />
      <import namespace="System.Collections" />
      <import namespace="System.Collections.Specialized" />
      <import namespace="NAnt.Core.Types" />
      <import namespace="NAnt.Core.Util" />
      <import namespace="NAnt.Core.Tasks" />
    </imports>
    
    <code>
      <![CDATA[
       [TaskName("ilmerge")]
       public class ILMergeTask : ExternalProgramBase
       {
        private bool internalize;        
        private bool allowDuplicates;
        private bool allowMultiple;
        private bool copyAttributes;
        private bool debugInfo;
        private bool xmldoc;
        private bool wildcards;
        private FileSet assemblies;
        private string keyFile;
        private string logFile;
        private string outputFile;
        private string primaryFile;

        [BuildElement("assemblies", Required = true)]
        public virtual FileSet InputAssemblies
        {
         get { return this.assemblies; }
         set { this.assemblies = value; }
        }

        [TaskAttribute("allowDuplicates"), BooleanValidator()]
        public virtual bool AllowDuplicates
        {
         get { return this.allowDuplicates; }
         set { this.allowDuplicates = value; }
        }

        [TaskAttribute("allowMultiple"), BooleanValidator()]
        public virtual bool AllowMultiple
        {
         get { return this.allowMultiple; }
         set { this.allowMultiple = value; }
        }

        [TaskAttribute("wildcards"), BooleanValidator()]
        public virtual bool Wildcards
        {
         get { return this.wildcards; }
         set { this.wildcards = value; }
        }

        [TaskAttribute("copyAttributes"), BooleanValidator()]
        public virtual bool CopyAttributes
        {
         get { return this.copyAttributes; }
         set { this.copyAttributes = value; }
        }

        [TaskAttribute("debugInfo"), BooleanValidator()]
        public virtual bool DebugInfo
        {
         get { return this.debugInfo; }
         set { this.debugInfo = value; }
        }

        [TaskAttribute("internalize"), BooleanValidator()]
        public virtual bool Internalize
        {
         get { return this.internalize; }
         set { this.internalize = value; }
        }

        [TaskAttribute("xmldoc"), BooleanValidator()]
        public virtual bool Xmldoc
        {
         get { return this.xmldoc; }
         set { this.xmldoc = value; }
        }
        
        [TaskAttribute("logfile")]
        public virtual string LogFile
        {
         get { return this.logFile == null ? null : this.Project.GetFullPath(this.logFile); }
         set { this.logFile = StringUtils.ConvertEmptyToNull(value); }
        }

        [TaskAttribute("outputfile", Required = true), StringValidator(AllowEmpty = false)]
        public virtual string OutputFile
        {
         get { return this.outputFile == null ? null : this.Project.GetFullPath(this.outputFile); }
         set { this.outputFile = StringUtils.ConvertEmptyToNull(value); }
        }

        [TaskAttribute("primary", Required = true), StringValidator(AllowEmpty = false)]
        public virtual string PrimaryFile
        {
         get { return this.primaryFile == null ? null : this.Project.GetFullPath(this.primaryFile); }
         set { this.primaryFile = StringUtils.ConvertEmptyToNull(value); }
        }

        [TaskAttribute("program", Required = true), StringValidator(AllowEmpty = false)]
        public override string ExeName
        {
         get { return base.ExeName; }
         set { base.ExeName = value; }
        }

        public override string ProgramArguments
        {
         get { return string.Empty; }
        }


        protected override void ExecuteTask()
        {
         try
         {
          Log(Level.Info, "Executing ILMerge.exe");
          Log(Level.Info, string.Format("/out:\"{0}\"", this.outputFile));
          Log(Level.Info, string.Format("/log:\"{0}\"", this.logFile));
          Arguments.Add(new Argument(string.Format("/out:\"{0}\"", this.outputFile)));

          Log(Level.Info, string.Format("assembly[{0}]: {1}", "primary", this.primaryFile));
          Arguments.Add(new Argument(string.Format("\"{0}\"", this.primaryFile)));

          for (int i = 0; i < this.assemblies.FileNames.Count; i++)
          {
             Log(Level.Info, string.Format("assembly[{0}]: {1}", i, this.assemblies.FileNames[i]));
             Arguments.Add(new Argument(string.Format("\"{0}\"", this.assemblies.FileNames[i])));
          }

          Arguments.Add(new Argument(string.Format("/log:\"{0}\"", this.logFile)));

          if (Internalize)
          {
             Log(Level.Info, "/internalize");
             Arguments.Add(new Argument("/internalize"));
          }
          
          if (Xmldoc)
          {
             Log(Level.Info, "/xmldocs");
             Arguments.Add(new Argument("/xmldocs"));
          }
          
          if (AllowDuplicates)
          {
             Log(Level.Info, "/allowDup");
             Arguments.Add(new Argument("/allowDup"));
          }
          
          if (AllowMultiple)
          {
             Log(Level.Info, "/allowMultiple");
             Arguments.Add(new Argument("/allowMultiple"));
          }

          if (CopyAttributes)
          {
             Log(Level.Info, "/copyattrs");
             Arguments.Add(new Argument("/copyattrs"));
          }
          
          if (Wildcards)
          {
             Log(Level.Info, "/wildcards");
             Arguments.Add(new Argument("/wildcards"));
          }
          
          if (DebugInfo)
          {
             Log(Level.Info, "/ndebug");
             Arguments.Add(new Argument("/ndebug"));
          }          

          base.FailOnError = true;
          base.ExecuteTask();
         }
         catch (Exception ex)
         {
          throw new BuildException(string.Format("Error executing ILMerge {0}", "test"), Location, ex);
         }
        }
       }
      ]]>
    </code>
  </script>
</task>